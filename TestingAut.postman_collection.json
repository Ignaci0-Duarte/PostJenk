{
	"info": {
		"_postman_id": "872ac700-95f4-4b0f-9714-127665631732",
		"name": "TestingAut",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17082447"
	},
	"item": [
		{
			"name": "TA GET 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Tiempo de Respuesta menor a 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Codigo de Estado igual a 200, 201, 204 o 205\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,204,205]);\r",
							"});\r",
							"pm.test(\"La Respuesta es un json\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"pm.test(\"La Respuesta no es vacia\", function () {\r",
							"    pm.expect(pm.response.json()).to.not.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/?id=1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						""
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TA GET 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Control de estructura\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"    jsonData.forEach(function (item) {\r",
							"        pm.expect(item).to.have.property(\"userId\");\r",
							"        pm.expect(item).to.have.property(\"id\");\r",
							"        pm.expect(item).to.have.property(\"title\");\r",
							"        pm.expect(item).to.have.property(\"body\");\r",
							"    });\r",
							"});\r",
							"pm.test(\"Verificaci√≥n de id y userId creciente\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var expectedId = 1;\r",
							"    var expectedUserId = 1;\r",
							"    jsonData.forEach(function (item) {\r",
							"        pm.expect(item.id).to.eql(expectedId);\r",
							"        pm.expect(item.userId).to.eql(expectedUserId);\r",
							"        expectedId++;\r",
							"        if (expectedId <= 10) {\r",
							"            expectedUserId = 1;\r",
							"        } else if (expectedId <= 20 && expectedId >10) {\r",
							"            expectedUserId = 2;\r",
							"        }else if (expectedId <= 30 && expectedId >20) {\r",
							"            expectedUserId = 3;\r",
							"        }else if (expectedId <= 40 && expectedId >30) {\r",
							"            expectedUserId = 4;\r",
							"        }else if (expectedId <= 50 && expectedId >40) {\r",
							"            expectedUserId = 5;\r",
							"        }else if (expectedId <= 60 && expectedId >50) {\r",
							"            expectedUserId = 6;\r",
							"        }else if (expectedId <= 70 && expectedId >60) {\r",
							"            expectedUserId = 7;\r",
							"        }else if (expectedId <= 80 && expectedId >70) {\r",
							"            expectedUserId = 8;\r",
							"        }else if (expectedId <= 90 && expectedId >80) {\r",
							"            expectedUserId = 9;\r",
							"        }else if (expectedId <= 100 && expectedId >90) {\r",
							"            expectedUserId = 10;\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "TA POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Consulta POST exitosa\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.json;\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	]
}